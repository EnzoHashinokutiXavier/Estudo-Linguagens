&& = "e"
(x && y)
se x = True e Y = True, resultado = True
se algum ou os dois for False, resultado = False

|| = "ou"
(x || y)
se x ou y ou ambos = True, resultado = True
se nenhum for True, resultado = False

! inverte sinal
se x = True, !x = False
se x = False, !x = True

== igual
!= diferente
++ soma 1
-- subtrai 1


int x
if (y)
{
    x = 5;
}
else 
{
    x = 6;
}
é a mesma coisa que
int x = (y) ? 5 : 6;
?: ajuda a diminuir o codigo e facilitar
primeiro valor se for verdadeiro segundo se for 


while(x)
enquanto x for veradeiro acontece o loop

do
{

}
while(x);
acontece uma vez e repete se x for verdadeiro

for(int i = 0; i < 10; i++)
{

}
define i como 0, enquanto i menor que 10, i aumenta um a cada loop

rm = excluir arquivo
rm program1.c

ls = arquivos
ex:
PS C:\programas> ls


    Diretório: C:\programas


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        07/04/2025     16:47                .vscode
d-----        15/04/2025     14:37                CS50
d-----        08/04/2025     09:38                Curso em vídeo
d-----        07/04/2025     10:47                Eng de Software
d-----        07/04/2025     10:54                outros
d-----        07/04/2025     10:47                SuperMarketGame


#define NAME REPLACEMENT
ex
#define PI 3.14


& -> localização
* -> ponteiro
ex 
int *p = &n


a = 50;
*p = &a;
&a vejo a localização de a
p armazena informação da localização de a 
*p aponta para oque esta dentro de a
se eu altero o valor de *p, tambem altero valor de a


char *s = get_string("s : ");
char *t = s;
t e s apontam para o mesmo espaço na memoria, oq eu alterar em t, altera em se

porem

#include<stdlib.h>           // malloc
char *t = malloc(strlen(s) + 1); 
t agora aponta para um espaço na memoria do mesmo tamanho de s
if (t == NULL)  // se o malloc falhar
{
    return 1;
}
for(i = 0, n = strlen(s); i <= n; i++){
    t[i] = s[i];
}
s é copiado em t inteiramente (ate o \0)
free(t); // libero o espaço de t


fopen abre um arquivo para leitura ou escrita
fclose fecha o arquivo

FILE *input = fopen("arquivo.txt", "r");
    /nome da variavel              /argumento
argumentos :
r para ler 
w para escrever 
rb e wb para arquivos em binario

fread le um dado de um arquivo e deixa em um buffer
fwrite escreve um dado de um buffer no arquivo
buffer = espaço de memoria temporario que armazena informação de um arquivo
              /tamanho do bloco (byte)
fread(buffer, 1, 4, input);
    /variavel   /quantos blocos deseja ver

fwrite(buffer, 1, 4, output);


Dynamic Memory Allocation
malloc() com o parametro de numero de bytes necessarios
apos obter o espaço na memoria, malloc vai retornar um ponteiro para aquele espaço
se malloc() nao pode dar um espaço de memoria, retorna NULL
!!! Toda vez que usar malloc verifique se o ponteiro é NULL

Quando voce fecha uma função e o programa volta a main, todo espaço utilizado para a função é liberado para ser
alocado novos valores, mas quando se usa malloc o espaço não é devolvido
Quando terminar de trabalhar com dynamic memory allocation, libere o espaço reservado com free()
Caso contrario ocorrera um vazamento de memoria que pode ser devastador

Todo malloc() precisa ser finalizado com um free()
Apenas memoria de malloc() se usa free()
Nao use free() em um bloco de memoria mais de uma vez